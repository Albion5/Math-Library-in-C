#suite s21_my_fmod_suite
#test s21_my_fmodl_test_1
 double data1[SIZE] = {5.1,3.0,-5.1, -3.0, 123.6546, -0.0, 123.6546, 7.0, -12356.64171}; 
 double data2[SIZE] = {5.1,3.0,-5.1, -3.0, 123.6546, 1.0, 45.469, -2.0, -12356.64171}; 

 for (int i = 0; i < SIZE; i++) {
   for (int j = 0; j < SIZE; j++) {
     // printf("%.16Lf\t %.16Lf\n", data1[i], data2[j]);
     // printf("my=%.16Lf\nor=%.16Lf\n", s21_fmod(data1[i], data2[j]), fmodl(data1[i], data2[j]));
     ck_assert_ldouble_eq_tol(s21_fmod(data1[i], data2[j]), fmodl(data1[i], data2[j]), 0.000000000001);
   }
 }

#test s21_s21_fmod_test_nan
double data1[2] = {0.0, -s21_nan}; 
double data2[2] = {s21_nan, -s21_nan}; 
for (int i = 0; i < 2; i++) {
  for (int j = 0; j < 2; j++) {
    ck_assert_ldouble_nan(s21_fmod(data1[i], data2[j]));
  }
}

#test s21_s21_fmod_test_inf_1
double data1[2] = {s21_inf, -s21_inf}; 
double data2[2] = {s21_inf, -s21_inf}; 
for (int i = 0; i < 2; i++) {
  for (int j = 0; j < 2; j++) {
    ck_assert_ldouble_nan(s21_fmod(data1[i], data2[j]));
  }
}

#test s21_s21_fmod_test_inf_2
double data1[3] = {3.0,-5.1, -0.0}; 
double data2[3] = {s21_inf, -s21_inf, s21_inf}; 
for (int i = 0; i < 3; i++) {
  for (int j = 0; j < 3; j++) {
    // printf("%.16Lf\t %.16Lf\n", data1[i], data2[j]);
    // printf("my=%.16Lf\nor=%.16Lf\n", s21_fmod(data1[i], data2[j]), fmodl(data1[i], data2[j]));
    ck_assert_ldouble_eq_tol(s21_fmod(data1[i], data2[j]), fmodl(data1[i], data2[j]), 0.000000000001);
  }
}

#test s21_s21_fmod_test_0_1
double data1[2] = {3.0,-0.0}; 
double data2[2] = {0.0, -0.0L}; 
for (int i = 0; i < 2; i++) {
  for (int j = 0; j < 2; j++) {
    ck_assert_ldouble_nan(s21_fmod(data1[i], data2[j]));
  }
}